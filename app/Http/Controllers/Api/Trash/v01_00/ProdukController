<?php

namespace App\Http\Controllers\Api;

use Illuminate\Http\Request;
use App\Models\Produk;
use App\Http\Controllers\Controller;
use CILog;
use Illuminate\Database\Query\Expression;
use Illuminate\Validation\Rule;
use App\Rules\FloatValidator;

class ProdukController extends Controller
{
    protected $path_log = null;

    public function __construct()
    {
        CILog::enableQueryLog();
        $this->path_log = storage_path('logs/api/api_'.date('Ymd').'.log');
        CILog::setLogToDb(CILog::TYPE_REQUEST_ACCEPTED);
    }

    public function __destruct()
    {
    }

    public function index()
    {
        $log_code = 'XXXXX'; $http_code = 0; $gate = 0;
        try {
            $model = Produk::with(['kelompok', 'satuan'])->orderBy('produk_id','ASC')->get();
            if(!$model) {
                $log_code = 'R0001'; $http_code = 404; $gate = 1;
                throw new \Exception('Data not found',$http_code);
            }

            $log_code = '00000'; $http_code = 200; $gate = 2;
            return response()->json([
                'code' => $log_code,
                'type' => 'success',
                'message' => 'Success',
                'data' => $model
            ], $http_code);

        } catch(\Exception $e) {
            return response()->json([
                'code' => $log_code,
                'type' => 'error',
                'message' => $e->getMessage()
            ], empty($http_code) ? 500 : $http_code);
        }
    }

    public function show($id)
    {
        $log_code = 'XXXXX'; $http_code = 0; $gate = 0;
        try {
            $model = Produk::with(['kelompok', 'satuan'])->where((new Produk)->getKeyName(), $id)->first();
            if(!$model) {
                $log_code = 'R0001'; $http_code = 404; $gate = 1;
                throw new \Exception('Data not found',$http_code);
            }

            $log_code = '00000'; $http_code = 200; $gate = 2;
            return response()->json([
                'code' => $log_code,
                'type' => 'success',
                'message' => 'Success',
                'data' => $model
            ], $http_code);
        } catch(\Exception $e) {
            return response()->json([
                'code' => $log_code,
                'type' => 'error',
                'message' => $e->getMessage()
            ], empty($http_code) ? 500 : $http_code);
        }
    }

    public function store(Request $request)
    {
        $log_code = 'XXXXX'; $http_code = 0; $gate = 0;
        try {
            $validator = \Validator::make($request->post(), [
                'isenabled' => ['required', 'boolean'],
                'kelompok_id' => ['required', 'exists:m_kelompok_aset,kelompok_id'],
                'kodeproduk' => ['required', 'max:150', 'unique:m_produk,kodeproduk'],
                'kodebmn' => ['max:150'],
                'namaproduk' => ['required', 'max:150'],
                'merk' => ['required', 'max:150'],
                'tipe' => ['required', 'max:150'],
                'no_sn' => ['max:40','unique:m_produk,no_sn'],
                'satuan_id' => ['required', 'exists:m_satuan,satuan_id'],
                'hargajual' => [new FloatValidator()],
                'hargabeli' => [new FloatValidator()],
                'cre_user' => ['required', 'max:50']
            ], [
                'kelompok_id.required' => ':attribute tidak boleh kosong! Anda dapat memperoleh nilai ini dari "GET:/api/kelompok"',
                'kelompok_id.exists' => ':attribute tidak valid! Anda dapat memperoleh nilai ini dari "GET:/api/kelompok"',
                'satuan_id.required' => ':attribute tidak boleh kosong! Anda dapat memperoleh nilai ini dari "GET:/api/satuan"',
                'satuan_id.exists' => ':attribute tidak valid! Anda dapat memperoleh nilai ini dari "GET:/api/satuan"'
            ]);
            if($validator->fails()) {
                $log_code = 'F0001'; $http_code = 400; $gate = 1;
                return response()->json([
                    'code' => $log_code,
                    'type' => 'error',
                    'message' => 'The given data was invalid.',
                    'errors' => $validator->messages()->get('*')
                ], $http_code);
            }

            $model = new Produk();
            $model->isenabled    = $request->post('isenabled');
            $model->kelompok_id  = $request->post('kelompok_id');
            $model->kodeproduk   = $request->post('kodeproduk');
            $model->kodebmn      = $request->post('kodebmn');
            $model->namaproduk   = $request->post('namaproduk');
            $model->merk         = $request->post('merk');
            $model->tipe         = $request->post('tipe');
            $model->no_sn        = $request->post('no_sn');
            $model->satuan_id    = $request->post('satuan_id');
            $model->hargajual    = $request->post('hargajual');
            $model->hargabeli    = $request->post('hargabeli');
            $model->cre_user     = $request->post('cre_user');
            if(!$model->save()) {
                $log_code = 'F0002'; $http_code = 500; $gate = 2;
                throw new \Exception('Failed to save data',$http_code);
            }

            $log_code = '00000'; $http_code = 200; $gate = 3;
            return response()->json([
                'code' => $log_code,
                'type' => 'success',
                'message' => 'Data saved successfully'
            ], $http_code);
        } catch (\Exception $e) {
            return response()->json([
                'code' => $log_code,
                'type' => 'error',
                'message' => $e->getMessage()
            ], empty($http_code) ? 500 : $http_code);
        }
    }

    public function update(Request $request, $id)
    {
        $log_code = 'XXXXX'; $http_code = 0; $gate = 0;
        try {
            $model = Produk::where((new Produk)->getKeyName(), $id)->first();
            if(!$model) {
                $log_code = 'R0001'; $http_code = 404; $gate = 1;
                throw new \Exception('Data not found',$http_code);
            }
            //print('<pre>'.print_r($model,true).'</pre>'); exit;
            //$fields = array_merge(array_map('trim', $request->post()));
            //print('<pre>'.print_r($fields,true).'</pre>'); exit;
            $validator = \Validator::make($request->post(), [
                'isenabled' => ['boolean'],
                'kelompok_id' => ['exists:m_kelompok_aset,kelompok_id'],
                'kodeproduk' => ['max:150', Rule::unique('m_produk')->ignore($model->kodeproduk,'kodeproduk')],
                'kodebmn' => ['max:150'],
                'namaproduk' => ['max:150'],
                'merk' => ['max:150'],
                'tipe' => ['max:150'],
                'no_sn' => ['max:40',Rule::unique('m_produk')->ignore($model->no_sn,'no_sn')],
                'satuan_id' => ['exists:m_satuan,satuan_id'],
                'hargajual' => [new FloatValidator()],
                'hargabeli' => [new FloatValidator()],
                'upd_user' => ['required', 'max:50']
            ]);
            if($validator->fails()) {
                $log_code = 'F0001'; $http_code = 400; $gate = 2;
                return response()->json([
                    'code' => $log_code,
                    'type' => 'error',
                    'message' => 'The given data was invalid.',
                    'errors' => $validator->messages()->get('*')
                ], $http_code);
            }

            $model->fill($request->all());
            if(!$model->save()) {
                $log_code = 'F0003'; $http_code = 500; $gate = 3;
                throw new \Exception('Failed to update data',$http_code);
            }

            $log_code = '00000'; $http_code = 200; $gate = 4;
            return response()->json([
                'code' => $log_code,
                'type' => 'success',
                'message' => 'Data changed successfully'
            ], $http_code);

        } catch (\Exception $e) {
            return response()->json([
                'code' => $log_code,
                'type' => 'error',
                'message' => $e->getMessage()
            ], empty($http_code) ? 500 : $http_code);
        }
    }

    public function destroy($id)
    {
        $log_code = 'XXXXX'; $http_code = 0; $gate = 0;
        try {
            $model = Produk::where((new Produk)->getKeyName(), $id)->first();
            if(!$model) {
                $log_code = 'R0001'; $http_code = 404; $gate = 1;
                throw new \Exception('Data not found',$http_code);
            }

            if(!$model->delete()) {
                $log_code = 'F0004'; $http_code = 500; $gate = 2;
                throw new \Exception('Failed to delete data',$http_code);
            }

            $log_code = '00000'; $http_code = 200; $gate = 3;
            return response()->json([
                'code' => $log_code,
                'type' => 'success',
                'message' => 'Data deleted successfully'
            ], $http_code);
        } catch (\Exception $e) {
            return response()->json([
                'code' => $log_code,
                'type' => 'error',
                'message' => $e->getMessage()
            ], empty($http_code) ? 500 : $http_code);
        }
    }
}
